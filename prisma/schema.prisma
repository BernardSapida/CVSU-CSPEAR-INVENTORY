// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum BorrowStatus {
  Pending
  ToPickup
  PickedUp
  Returned
}

enum Condition {
  Good
  Misplaced
  Damaged
}

enum Role {
  Student
  Faculty
  Admin
}

enum College {
  CAFENR
  CAS
  CCJ
  CED
  CEMDS
  CEIT
  CON
  CSPEAR
  CVMBS
  COM
  UNKNOWN
}

model Users {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  clerkUserId String  @unique
  firstname   String
  lastname    String
  email       String  @unique
  role        Role
  college     College

  cart Cart?
}

model Equipments {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  stock       Int
  isAvailable Boolean
}

model Cart {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  cartItems      CartItems[]
  user           Users           @relation(fields: [userId], references: [id])
  userId         String          @unique @db.ObjectId
  BorrowRequests BorrowRequests?
}

model CartItems {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  quantity    Int
  stock       Int
  isAvailable Boolean
  cart        Cart    @relation(fields: [cartId], references: [id])
  cartId      String  @db.ObjectId
}

model BorrowRequests {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  email              String
  college            College
  role               Role
  title              String
  purpose            String
  borrowDate         DateTime
  returnDate         DateTime
  borrowStatus       BorrowStatus
  condition          Condition
  note               String
  userId             String
  createdAt          DateTime            @default(now())
  cart               Cart                @relation(fields: [cartId], references: [id])
  cartId             String              @unique @db.ObjectId
  UserNotifications  UserNotifications[]
  AdminNotifications AdminNotifications?
}

model UserNotifications {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  isViewed         Boolean
  createdAt        DateTime       @default(now())
  borrowRequest    BorrowRequests @relation(fields: [borrowRequestId], references: [id])
  borrowRequestId String         @db.ObjectId
}

model AdminNotifications {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  isViewed         Boolean
  createdAt        DateTime       @default(now())
  borrowRequest    BorrowRequests @relation(fields: [borrowRequestId], references: [id])
  borrowRequestId String         @unique @db.ObjectId
}
