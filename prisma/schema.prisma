// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum BorrowStatus {
  Pending
  ToPickup
  PickedUp
  Returned
}

enum Condition {
  Good
  Misplaced
  Damaged
}

enum Role {
  UNKNOWN
  Student
  Faculty
  Admin
}

enum College {
  CAFENR
  CAS
  CCJ
  CED
  CEMDS
  CEIT
  CON
  CSPEAR
  CVMBS
  COM
  UNKNOWN
}

model Users {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkUserId String   @unique
  firstname   String
  lastname    String
  email       String   @unique
  role        Role
  college     College
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cart           Cart[]
  borrowRequests BorrowRequests[]
}

model Equipments {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  stock       Int
  isAvailable Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Cart {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  cartItems CartItems[]
  submitted Boolean
  user      Users       @relation(fields: [userId], references: [id])
  userId    String      @db.ObjectId
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  borrowRequests BorrowRequests?
}

model CartItems {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  quantity    Int
  stock       Int
  isAvailable Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cart   Cart   @relation(fields: [cartId], references: [id])
  cartId String @db.ObjectId
}

model BorrowRequests {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  borrowDate   DateTime
  returnDate   DateTime
  purpose      String
  borrowStatus BorrowStatus
  condition    Condition
  note         String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  user   Users  @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  cart   Cart   @relation(fields: [cartId], references: [id])
  cartId String @unique @db.ObjectId

  userNotifications  UserNotifications[]
  adminNotifications AdminNotifications?
}

model UserNotifications {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  isViewed     Boolean
  borrowStatus BorrowStatus
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  borrowRequest   BorrowRequests @relation(fields: [borrowRequestId], references: [id])
  borrowRequestId String         @db.ObjectId
}

model AdminNotifications {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  isViewed  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  borrowRequests  BorrowRequests @relation(fields: [borrowRequestId], references: [id])
  borrowRequestId String         @unique @db.ObjectId
}
