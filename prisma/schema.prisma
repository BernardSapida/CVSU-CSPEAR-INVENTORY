// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider = "mongodb"
  // relationMode = "prisma"
  url      = env("DATABASE_URL")
}

enum BorrowStatus {
  Pending               
  ToPickup
  PickedUp
  Returned
}

enum Condition {
  Good
  Misplaced
  Damaged
}

enum Role {
  Student
  Faculty
  Admin
}

enum College {
  CAFENR
  CAS
  CCJ
  CED
  CEMDS
  CEIT
  CON
  CSPEAR
  CVMBS
  COM
  UNKNOWN
}

type BorrowEquipments {
  id           String
  name         String
  quantity     Int
  stock        Int
  is_available Boolean
}

model Users {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  firstname String
  lastname  String
  email     String  @unique
  role      Role
  college   College

  userBorrowItems UserBorrowItems?
}

model Equipments {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  stock        Int
  is_available Boolean
}

model UserBorrowItems {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  equipments  Json[]
  purpose     String
  borrow_date DateTime
  return_date DateTime
  user        Users              @relation(fields: [user_id], references: [id])
  user_id     String             @unique @db.ObjectId
}

model AdminBorrowRequests {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String
  college       College
  role          Role
  equipments    Json[]
  purpose       String
  borrow_date   DateTime
  return_date   DateTime
  user_id       String
  borrow_status BorrowStatus
  condition     Condition
  note          String
  created_at    DateTime
}

model UserHistory {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  request_id    String       @unique @db.ObjectId
  title         String
  borrow_status BorrowStatus
  condition     Condition
  is_viewed     Boolean
  user_id       String
  created_at    DateTime
}

model UserNotifications {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  request_id    String       @unique @db.ObjectId
  title         String
  borrow_status BorrowStatus
  is_viewed     Boolean
  user_id       String
  created_at    DateTime
}

model AdminNotifications {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  request_id    String       @unique @db.ObjectId
  title         String
  description   String
  is_viewed     Boolean
  user_id       String
  created_at    DateTime
}
